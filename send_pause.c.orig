#include <sys/time.h>
#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "set_timer.h"
#include "my_signal.h"
#include "flow_ctrl_pause.h"

char *if_name  = NULL;
int pause_time = 65535;

int usage(void)
{
    char msg[] = "Usage: send_pause if_name [count [pause_time [interval_sec [interval_usec]]]]\n"
                 "Arguments:\n"
                 "if_name:       NIC name such as eth0, eno1, enp0s6\n"
                 "count:         number of send pause packet.  0 means forever\n"
                 "pause_time:    pause time (0 - 65535).  Default 65535 (max)\n"
                 "interval_sec:  default 1 second\n"
                 "interval_usec: micro seconds\n"

    fprintf(stderr, "%s", msg);

    return 0;
}

void send_pause(int signo)
{
    if (flow_ctrl_pause(if_name, "01:80:c2:00:00:01", pause_time) < 0) {
         errx(1, "flow_ctrl_pause() error");
    }

    return;
}

int main(int argc, char *argv[])
{
    int interval_sec  = 1;
    int interval_usec = 0;
    int count         = 0;

    if (argc == 2) {
        if_name = argv[1];
    }
    else if (argc == 3) {
        if_name = argv[1];
        count   = strtol(argv[2], NULL, 0);
    }
    else if (argc == 4) {
        if_name      = argv[1];
        count        = strtol(argv[2], NULL, 0);
        pause_time   = strtol(argv[3], NULL, 0);
    }
    else if (argc == 5) {
        if_name      = argv[1];
        count        = strtol(argv[2], NULL, 0);
        pause_time   = strtol(argv[3], NULL, 0);
        interval_sec = strtol(argv[4], NULL, 0);
    }
    else if (argc == 6) {
        if_name       = argv[1];
        count         = strtol(argv[2], NULL, 0);
        pause_time    = strtol(argv[3], NULL, 0);
        interval_sec  = strtol(argv[4], NULL, 0);
        interval_usec = strtol(argv[5], NULL, 0);
    }
    else {
        usage();
        exit(1);
    }

    my_signal(SIGALRM, send_pause);
    set_timer(interval_sec, 0, interval_sec, 0);

    for ( ; ; ) {
        pause();
    }

    return 0;
}
